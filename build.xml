<?xml version="1.0" encoding="UTF-8"?>

<!-- Rename this project to something relevant! -->
<project name="rename-me" default="build" basedir=".">

	<tstamp />

	<php expression="trim(file_get_contents('${module.name}/VERSION'))" returnProperty="module.version" />

	<!-- Make sure properties are in existence -->
	<available file="./build/build.properties" property="properties_exist" />

	<!-- Has the modules file been created? -->
	<available file="${modules.depends.file}" property="modules_file_exists" />

	<!-- have we been installed? -->
	<available file="./mysite/local.conf.php" property="installed" />

	<property file="./build/build.properties"></property>

	<!-- Load in the custom tasks -->
	<taskdef name="symlink" classname="build.SymlinkTask" />
	<taskdef name="copyfolders" classname="build.CopyFoldersTask" />
	<taskdef name="sstest" classname="build.SilverStripeTestTask" />
	<taskdef name="ssmodules" classname="build.LoadModulesTask" />

	<target name="init" depends="non_interactive,check_properties">
		<mkdir dir="${build.output.dir}" />
	</target>

	<!-- Load modules where sensitive dependency exists -->
	<target name="update_modules" depends="create_modules_file">
		<ssmodules file="${modules.depends.file}" />
	</target>

	<target name="create_modules_file" unless="modules_file_exists">
		<copy file="${modules.depends.file}.default" tofile="${modules.depends.file}" />
	</target>

	<!--
	Add a new module to the system. Run from the commandline, you can pass
	in the details of the module as phing add_module -Dmodule=blog -Dmodurl=http://path/to/svn
	-->
	<target name="add_module">
		<ssmodules name="${module}" url="${modurl}" />
	</target>

	<!-- Ensures the build.properties file exists! -->
	<target name="check_properties" unless="properties_exist">
		<fail>!!Please create the build/build.properties file before continuing!!</fail>
	</target>

	<!-- A target that gets executed if the 'ni_build' parameter is set. This is done when
	the build is executed from a CI container -->
	<target name="non_interactive" if="ni_build">
		<!-- we'll make sure that there's a build.properties file, even if we're just using the default  -->
		<delete file="./build/build.properties" />
		<copy tofile="./build/build.properties" file="./build/build.properties.sample" />
		<delete dir="assets" />
		<delete file="./mysite/local.conf.php" />
		<delete file="./ssautesting/testing.conf.php" />
		<property name="properties_exist" value="true" override="true" />
		<property file="./build/build.properties"></property>
	</target>

	<!-- Installs a freshly checked-out silverstripe project -->
	<target name="build" depends="init">
		<!-- if it doesn't exist, create it and the default .htaccess -->
		<mkdir dir="assets" />
		<echo file="assets/.htaccess" append="false">
RemoveHandler .php .phtml .php3 .php4 .php5 .inc
RemoveType .php .phtml .php3 .php4 .php5 .inc
		</echo>

		<!-- Copy the DB configs -->
		<copy tofile="mysite/local.conf.php" file="${db.config}" overwrite="false">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the configs to be used for testing. Set the required variables in the build.properties file -->
		<copy tofile="ssautesting/testing.conf.php" file="${testing.config}" overwrite="false">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the htaccess -->
		<copy tofile=".htaccess" file="${htaccess.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<phingcall target="update_modules" />

		<!-- Trigger /dev/build for the new system -->
		<exec command="php sapphire/cli-script.php dev/build"></exec>
	</target>

	<!-- Create a deployable package -->
	<target name="package">
		<!-- package doesn't use the main clean, so that the db dump doesn't get wiped -->
		<delete>
			<fileset dir="${build.output.dir}">
				<include name="*.tar.gz" />
			</fileset>
		</delete>

		<!-- creates a default config file -->
		<copy file="${db.config}" tofile="mysite/${db.config}" />
		<tar destfile="${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="build/**" />
				<exclude name="mysite/local.conf.php" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/*.log" />
				<exclude name="**/.svn" />
				<exclude name="nbproject/**" />
				<exclude name="**/.htaccess" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
			</fileset>
		</tar>
	</target>

	<!-- a package that includes all items that the phing build normally downloads, which can
	be just extracted over the top of whatever is pulled out of git. This preserves all the
	.svn files for dependent modules etc -->
	<target name="phing-package" depends="clean,build">
		<!-- make sure we're on master... hudson kinda screws this up! -->
		<exec command="git checkout master && git pull origin master"></exec>
		<tar destfile="${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<include name="**/.svn" />
				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
			</fileset>
		</tar>
		<chmod file="${package.name}" mode="0664" />
	</target>

	<!-- A package that doesn't include files that are commonly overridden
	on remote sites -->
	<target name="update-package" depends="clean">
		<copy file="${db.config}" tofile="mysite/${db.config}" />
		<tar destfile="${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/local.conf.php" />
				<exclude name="mysite/*.log" />
				<exclude name="build/**" />
				<exclude name=".htaccess" />
				<exclude name="**/.svn" />
				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
				<exclude name="assets/**" />
				<exclude name="cms/**" />
				<exclude name="sapphire/**" />
			</fileset>
		</tar>
	</target>

	<target name="package-module">
		<mkdir dir="${build.output.dir}" />
		<delete file="${module.file}" />
		<tar destfile="${module.file}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="${module.name}/**" />
				<exclude name="**/.svn/" />
				<exclude name="**/.git/" />
			</fileset>
		</tar>
	</target>

	<!-- Creates a backup of the existing project, including the MySQL dump -->
	<target name="backup">
		<echo file="README.txt" append="false">
To restore this backup:
* Import the database file in configs/${phing.project.name}.sql
* Copy configs/silverstripe/local.conf.php.sample to mysite/local.conf.php
* Edit DB settings in local.conf as appropriate (typically, use MySQLDatabase as the db.type)
* Run 'php sapphire/cli-script.php dev/build'
		</echo>
		<exec command="mysqldump -u${db.user} -p${db.pass} ${db.name} > ${database_dump.name}"></exec>
		<phingcall target="package" />
	</target>

	<!-- Copy eclipse configs to the current directory -->
	<target name="eclipse" depends="init">
		<copy tofile=".project" file="./configs/eclipse/project.sample" overwrite="true">
			<filterchain><expandproperties/></filterchain>
		</copy>
	</target>

	<target name="ci_test" depends="build">
		<!-- lets get rid of files that we don't want tested -->
		<delete file="./sapphire/tests/WebserverRoutingTest.php" />
		<phingcall target="test" />
	</target>

	<!-- Execute all the test cases -->
	<target name="test">
		<!-- Make sure the log directory exists -->
		<mkdir dir="${testing.logdir}" />
		<mkdir dir="assets" />
		<!-- Copy the configs - done so that we can override the reporter type from an exernal source -->
		<copy tofile="ssautesting/testing.conf.php" file="${testing.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<exec command="php sapphire/cli-script.php dev/build"></exec>
		<sstest module="${module}" testcase="${testcase}" />
	</target>

	<target name="clean">

		<delete>
			<fileset dir="${build.output.dir}/">
			<include name="*.tar.gz" />
			</fileset>
		</delete>
		<delete file="${package.name}"></delete>
		<delete file="${database_dump.name}"></delete>
	</target>
</project>
