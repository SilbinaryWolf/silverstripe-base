<?xml version="1.0" encoding="UTF-8"?>

<!-- Rename this project to something relevant! -->
<project name="rename-me" default="build">

	<tstamp>
		<format property="FULLDTIME" pattern="%Y%m%d%H%M%S" />
	</tstamp>

	<!-- Make sure properties are in existence -->
	<available file="${project.basedir}/build/build.properties" property="properties_exist" />

	<!-- Has the modules file been created? -->
	<available file="${modules.depends.file}" property="modules_file_exists" />

	<!-- have we been installed? -->
	<available file="${project.basedir}/mysite/local.conf.php" property="installed" />

	<property file="${project.basedir}/build/build.properties"></property>

	<php expression="trim(file_get_contents('${module.name}/VERSION'))" returnProperty="module.version" />

	<!-- Load in the custom tasks -->
	<taskdef name="symlink" classname="build.SymlinkTask" classpath="${project.basedir}" />
	<taskdef name="copyfolders" classname="build.CopyFoldersTask" classpath="${project.basedir}" />
	<taskdef name="sstest" classname="build.SilverStripeTestTask" classpath="${project.basedir}" />
	<taskdef name="ssmodules" classname="build.LoadModulesTask" classpath="${project.basedir}" />
	<taskdef name="sspatches" classname="build.ApplyPatchesTask" classpath="${project.basedir}" />
	<taskdef name="sshcmd" classname="build.BetterSshTask" classpath="${project.basedir}" />
	<taskdef name="scpcmd" classname="build.BetterScpTask" classpath="${project.basedir}" />

	<target name="help">
		<echo>

SilverStripe Australia Project Build
------------------------------------

This build file contains targets to assist in creating new SilverStripe project builds. 

* Delete the .git directory! You'll eventually add this project to a new location, meaning it is unnecessary to keep the existing git info
* Edit this build file and change the project name from rename-me to something more accurate
* Copy the build/build.properties.sample file to build/build.properties
* Edit that file and make any necessary adjustments. In particular, change the rewrite.base variable to match your webroot
* Edit the build/dependent-modules.default and add in any additional modules you may need. The format for these is
** modulename git|svn.url (the SCM url to retrieve this module) true|false (whether to run dev/build after fetching)
* Run phing, which will fetch all needed modules and run a dev/build for the first time
* Visit http://localhost/pathname/dev/build to ensure all caches are built correctly for the web

Important targets

* build - Retrieves all dependent modules (or updates them if they already exist), applies any relevant patches, and runs dev/build
* test - Executes all unit tests. You can run tests just for a single module by passing a module name, ie phing test -Dmodule=mysite. You can
  also optionally pass a single test case to run, eg phing test -Dmodule=mysite -Dtestcase=MyTest
* phing-package - Creates a complete copy of this development environment repository that can be passed to another person, retaining all SVN and Git information
* update-package - Creates a package that excludes several diretories that can be used for extracting over the top of existing installs
* backup - Takes a database dump of the site before packaging

Other features

* In some cases you will want to provide custom patches to dependent modules. As these can't be committed back to this project's repository, 
  a mechanism exists to include just the .patch diffs. Drop any diffs into build/patches, and these will be applied during the build target. 

		</echo>
	</target>

	<target name="init" depends="non_interactive,check_properties">
		<mkdir dir="${build.output.dir}" />
	</target>

	<!-- Load modules where sensitive dependency exists -->
	<target name="update_modules" depends="create_modules_file">
		<ssmodules file="${modules.depends.file}" />
	</target>

	<target name="create_modules_file" unless="modules_file_exists">
		<copy file="${modules.depends.file}.default" tofile="${modules.depends.file}" />
	</target>

	<!--
	Add a new module to the system. Run from the commandline, you can pass
	in the details of the module as phing add_module -Dmodule=blog -Dmodurl=http://path/to/svn
	-->
	<target name="add_module">
		<ssmodules name="${module}" url="${modurl}" />
	</target>

	<!-- Ensures the build.properties file exists! -->
	<target name="check_properties" unless="properties_exist">
		<fail>!!Please create the build/build.properties file before continuing!!</fail>
	</target>

	<!-- A target that gets executed if the 'ni_build' parameter is set. This is done when
	the build is executed from a CI container -->
	<target name="non_interactive" if="ni_build">
		<!-- we'll make sure that there's a build.properties file, even if we're just using the default  -->
		<delete file="${project.basedir}/build/build.properties" />
		<copy tofile="${project.basedir}/build/build.properties" file="${project.basedir}/build/build.properties.sample" />
		<delete dir="assets" />
		<delete file="${project.basedir}/mysite/local.conf.php" />
		<delete file="${project.basedir}/ssautesting/testing.conf.php" />
		<property name="properties_exist" value="true" override="true" />
		<property file="${project.basedir}/build/build.properties"></property>
	</target>

	<!-- Installs a freshly checked-out silverstripe project -->
	<target name="build" depends="init">
		<!-- if it doesn't exist, create it and the default .htaccess -->
		<mkdir dir="assets" />
		<echo file="assets/.htaccess" append="false">
RemoveHandler .php .phtml .php3 .php4 .php5 .inc
RemoveType .php .phtml .php3 .php4 .php5 .inc
		</echo>

		<echo file="mysite/BUILD_NUMBER" append="false">Build ${DSTAMP}</echo>

		<!-- Copy the DB configs -->
		<copy tofile="mysite/local.conf.php" file="${db.config}" overwrite="false">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the configs to be used for testing. Set the required variables in the build.properties file -->
		<copy tofile="ssautesting/testing.conf.php" file="${testing.config}" overwrite="false">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the htaccess -->
		<copy tofile=".htaccess" file="${htaccess.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<phingcall target="update_modules" />

		<phingcall target="apply_patches" />

		<!-- Trigger /dev/build for the new system -->
		<exec command="php sapphire/cli-script.php dev/build"></exec>
	</target>

	<target name="apply_patches">
		<mkdir dir="${patches.dir}" />
		<sspatches patchdir="${patches.dir}" />
	</target>
	

	<!-- Create a deployable package to use as the base for installing a new site FROM SCRATCH. 
	Please use the update-package target for creating a package to use for an update -->
	<target name="package" depends="build">
		<property name="currentpackage" value="${build.output.dir}/${package.name}" />
		<property name="packagetype" value="deploy" />
		<phingcall target="archive-package" />

		<tar destfile="${build.output.dir}/${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="assets/**" />
				<exclude name="build/**" />
				<exclude name="build.xml" />
				<exclude name="mysite/local.conf.php" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/*.log" />
				<exclude name="**/.svn/**" />
				<exclude name="**/.git/**" />
				<exclude name="nbproject/**" />
				<exclude name="**/.gitignore" />
				<exclude name=".htaccess" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
			</fileset>
		</tar>
	</target>

	<!-- a package that includes all items that the phing build normally downloads, which can
	be just extracted over the top of whatever is pulled out of git. This preserves all the
	.svn files for dependent modules etc -->
	<target name="phing-package" depends="clean,build">
		<property name="currentpackage" value="${build.output.dir}/${phing-package.name}" />
		<property name="packagetype" value="development" />
		<phingcall target="archive-package" />

		<!-- make sure we're on master... hudson kinda screws this up! -->
		<exec command="git branch ${git.branch}"></exec> <!-- this might cause a fatal, but that's okay... -->
		<exec command="git checkout ${git.branch}"></exec>
		<exec command="git pull origin ${git.branch}"></exec>

		<tar destfile="${build.output.dir}/${phing-package.name}" compression="gzip" defaultexcludes="false">
			<fileset dir="${project.basedir}">
				<include name="**/**" />

				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
			</fileset>
		</tar>
		<chmod file="${build.output.dir}/${phing-package.name}" mode="0664" />
	</target>

	<!-- A package that doesn't include files that are commonly overridden
	on remote sites -->
	<target name="update-package">
		<property name="currentpackage" value="${build.output.dir}/${update-package.name}" />
		<property name="packagetype" value="update" />
		<phingcall target="archive-package" />

		<copy file="${db.config}" tofile="mysite/${db.config}" />
		<tar destfile="${build.output.dir}/${update-package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/local.conf.php" />
				<exclude name="mysite/*.log" />
				<exclude name="build/**" />
				<exclude name="build.xml" />
				<exclude name=".htaccess" />
				<exclude name="**/.svn/**" />
				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
				<exclude name="**/.git/**" />
				<exclude name="assets/**" />
				<exclude name="cms/**" />
				<exclude name="sapphire/**" />
			</fileset>
		</tar>
		<chmod file="${build.output.dir}/${update-package.name}" mode="0664" />
	</target>

	<target name="package-module">
		<property name="currentpackage" value="${module.file}" />
		<property name="packagetype" value="module" />
		<phingcall target="archive-package" />

		<echo file="${module.name}/BUILD_NUMBER" append="false">Build ${DSTAMP}</echo>

		<mkdir dir="${build.output.dir}" />
		<delete file="${module.file}" />
		<tar destfile="${module.file}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="${module.name}/**" />
				<exclude name="**/.svn/" />
				<exclude name="**/.git/" />
			</fileset>
		</tar>
	</target>

	<!-- Creates a backup of the existing project, including the MySQL dump -->
	<target name="backup">
		<echo file="README.txt" append="false">
To restore this backup:
* Import the database file in backups/${phing.project.name}.sql
* Copy configs/silverstripe/local.conf.php.sample to mysite/local.conf.php
* Edit DB settings in local.conf as appropriate (typically, use MySQLDatabase as the db.type)
* Run 'php sapphire/cli-script.php dev/build'
		</echo>
		<mkdir dir="${backup.dir}" />
		<echo file="${backup.dir}/.htaccess" append="false">
Deny from all
		</echo>
		<exec command="mysqldump -u${db.user} -p${db.pass} ${db.name} > ${backup.sql}"></exec>
		<phingcall target="package" />
	</target>

	<target name="ci_test" depends="build">
		<!-- lets get rid of files that we don't want tested -->
		<delete file="${project.basedir}/sapphire/tests/WebserverRoutingTest.php" />
		<phingcall target="test" />
	</target>

	<!-- Execute all the test cases -->
	<target name="test">
		<!-- Make sure the log directory exists -->
		<mkdir dir="${testing.logdir}" />
		<mkdir dir="assets" />
		<!-- Copy the configs - done so that we can override the reporter type from an exernal source -->
		<copy tofile="ssautesting/testing.conf.php" file="${testing.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<exec command="php sapphire/cli-script.php dev/build"></exec>
		<sstest module="${module}" testcase="${testcase}" />
	</target>

	<target name="archive-package">
		<copy todir="${build.archive.dir}">
			<fileset dir="${build.output.dir}">
				<include name="*-${packagetype}*.tar.gz" />
			</fileset>
		</copy>
		<!-- delete all similar files from the output -->
		<delete>
			<fileset dir="${build.output.dir}">
				<include name="*-${packagetype}*.tar.gz" />	
			</fileset>
		</delete>
	</target>
	
	<target name="deploy">
		<if>
			<isset property="deploy.incremental" />
			<then>
				<phingcall target="update-package" />
			</then>
			<else>
				<phingcall target="package" />
			</else>
		</if>
		<foreach list="${deploy.targets}" param="deptarget" target="deploy-target" />
	</target>

	<target name="deploy-target">
		<if>
			<or>
				<isset property="deploy.${deptarget}.pass" />
				<isset property="deploy.${deptarget}.pubkey" />
			</or>
			<then></then>
			<else>
				<input propertyName="deploy.${deptarget}.pass" promptChar=":">Deployment password</input>
			</else>
		</if>
		
		<if>
			<isset property="deploy.${deptarget}.apache-group" />
			<then></then>
			<else>
				<input propertyName="deploy.${deptarget}.apache-group" promptChar=":">Apache group for ${deptarget}@${deploy.${deptarget}.host}</input>
			</else>
		</if>
		
		<if>
			<isset property="deploy.incremental" />
			<then>
				<property name="deploy.local.package" value="${update-package.name}" />
				<property name="deploy.remote.package" value="${deploy.incremental.file}" />
			</then>
			<else>
				<property name="deploy.local.package" value="${package.name}" />
				<property name="deploy.remote.package" value="${deploy.release.file}" />
			</else>
		</if>
		
		<!-- make sure needed directories are there -->
		<sshcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			command="mkdir --mode=2775 -p ${deploy.${deptarget}.path}/${deploy.release.path}/silverstripe-cache;mkdir --mode=2775 -p ${deploy.${deptarget}.path}/${deploy.release.path}/assets" 
			ignoreerrors="${first.deploy}"
			/>

		<echo>Copying build/${deploy.local.package} to ${deptarget}@${deploy.${deptarget}.host}</echo>
		<scpcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			todir="${deploy.${deptarget}.path}/${deploy.release.path}" 
			file="${build.output.dir}/${deploy.local.package}"
			/>
			
		<if>
			<isset property="deploy.incremental" />
			<then>
				<echo>Copying previous release</echo>
				<sshcmd username="${deploy.${deptarget}.user}" 
					password="${deploy.${deptarget}.pass}"
					pubkeyfile="${deploy.${deptarget}.pubkey}"
					privkeyfile="${deploy.${deptarget}.privkey}"
					host="${deploy.${deptarget}.host}"
					command="cp -Ra ${deploy.${deptarget}.path}/current/* ${deploy.${deptarget}.path}/${deploy.release.path}/" 
					ignoreerrors="${first.deploy}"
					/>

				<!-- needed because the copy doesn't take the top level .htaccess!!?-->
				<echo>Copying ${deptarget} configs</echo>
				<sshcmd username="${deploy.${deptarget}.user}" 
					password="${deploy.${deptarget}.pass}"
					pubkeyfile="${deploy.${deptarget}.pubkey}"
					privkeyfile="${deploy.${deptarget}.privkey}"
					host="${deploy.${deptarget}.host}"
					command="cp ${deploy.${deptarget}.path}/${deploy.release.path}/mysite/.assets-htaccess ${deploy.${deptarget}.path}/${deploy.release.path}/assets/.htaccess; cp ${deploy.${deptarget}.path}/current/.htaccess ${deploy.${deptarget}.path}/${deploy.release.path}/; cp ${deploy.${deptarget}.path}/current/mysite/local.conf.php ${deploy.${deptarget}.path}/${deploy.release.path}/mysite/local.conf.php"
					ignoreerrors="${first.deploy}"
					/>
			</then>
		</if>

		<echo>Unzipping ${deploy.${deptarget}.path}/${deploy.remote.package} on target ${deptarget}</echo>
		<sshcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			command="tar -zx -C ${deploy.${deptarget}.path}/${deploy.release.path} -f ${deploy.${deptarget}.path}/${deploy.remote.package}; rm ${deploy.${deptarget}.path}/${deploy.remote.package};" 
			ignoreerrors="${first.deploy}"
			/>

		<if>
			<isset property="deploy.incremental" />
			<then>
			</then>
			<else>
				<echo>Copying ${deptarget} configs</echo>
				<sshcmd username="${deploy.${deptarget}.user}" 
					password="${deploy.${deptarget}.pass}"
					pubkeyfile="${deploy.${deptarget}.pubkey}"
					privkeyfile="${deploy.${deptarget}.privkey}"
					host="${deploy.${deptarget}.host}"
					command="cp ${deploy.${deptarget}.path}/${deploy.release.path}/mysite/.assets-htaccess ${deploy.${deptarget}.path}/${deploy.release.path}/assets/.htaccess; cp ${deploy.${deptarget}.path}/current/.htaccess ${deploy.${deptarget}.path}/${deploy.release.path}/; cp ${deploy.${deptarget}.path}/current/mysite/local.conf.php ${deploy.${deptarget}.path}/${deploy.release.path}/mysite/local.conf.php"
					ignoreerrors="${first.deploy}"
					/>


				<echo>Copying ${deptarget} assets</echo>
				<sshcmd username="${deploy.${deptarget}.user}" 
					password="${deploy.${deptarget}.pass}"
					pubkeyfile="${deploy.${deptarget}.pubkey}"
					privkeyfile="${deploy.${deptarget}.privkey}"
					host="${deploy.${deptarget}.host}"
					command="cp -R ${deploy.${deptarget}.path}/current/assets ${deploy.${deptarget}.path}/${deploy.release.path}"
					ignoreerrors="${first.deploy}"
					/>
				<echo>Taking backup of ${deptarget} database</echo>
				<sshcmd username="${deploy.${deptarget}.user}" 
					password="${deploy.${deptarget}.pass}"
					pubkeyfile="${deploy.${deptarget}.pubkey}"
					privkeyfile="${deploy.${deptarget}.privkey}"
					host="${deploy.${deptarget}.host}"
					command="php ${deploy.${deptarget}.path}/current/mysite/scripts/backup_database.php"
					ignoreerrors="${first.deploy}"
					/>

			</else>
		</if>

		<!-- path of no return because this changes DB!! -->
		<echo>Running dev/build</echo>
		<sshcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			command="php ${deploy.${deptarget}.path}/${deploy.release.path}/sapphire/cli-script.php dev/build"
			ignoreerrors="${first.deploy}"
			/>	
			
		<echo>Updating symlinks</echo>
		<sshcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			command="rm ${deploy.${deptarget}.path}/current; ln -s ${deploy.${deptarget}.path}/${deploy.release.path} ${deploy.${deptarget}.path}/current"
			ignoreerrors="${first.deploy}"
			/>

		<echo>Fixing permissions</echo>
		<sshcmd username="${deploy.${deptarget}.user}" 
			password="${deploy.${deptarget}.pass}"
			pubkeyfile="${deploy.${deptarget}.pubkey}"
			privkeyfile="${deploy.${deptarget}.privkey}"
			host="${deploy.${deptarget}.host}"
			command="chgrp -R ${deploy.${deptarget}.apache-group}; find ${deploy.${deptarget}.path}/${deploy.release.path} -type f -exec chmod 664 {} \; ; find ${deploy.${deptarget}.path}/${deploy.release.path} -type d -exec chmod 2775 {} \; ;" 
			ignoreerrors="${first.deploy}"
			/>

	</target>
	
	<target name="sshtest">
		<sshcmd username="deploy" 
			password="deploy"
			host="localhost"
			command="ls -la" 
			/>	
	</target>

	<target name="clean">
		<mkdir dir="${build.output.dir}" />
		<delete file="${database_dump.name}"></delete>
	</target>
</project>
