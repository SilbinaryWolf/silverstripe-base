<?xml version="1.0" encoding="UTF-8"?>

<!-- Rename this project to something relevant! -->
<project name="bootstrap-rename-me" default="build" basedir="..">
	
	<tstamp />

	<!-- Make sure properties are in existence -->
	<available file="./scripts/build.properties" property="properties_exist" />
	
	<!-- Has the modules file been created? -->
	<available file="${modules.depends.file}" property="modules_file_exists" />

	<!-- have we been installed? -->
	<available file="./mysite/db.conf.php" property="installed" />

	<property file="./scripts/build.properties"></property>

	<!-- Load in the custom tasks -->
	<taskdef name="symlink" classname="scripts.SymlinkTask" />
	<taskdef name="copyfolders" classname="scripts.CopyFoldersTask" />
	<taskdef name="sstest" classname="scripts.SilverStripeTestTask" />
	<taskdef name="ssmodules" classname="scripts.LoadModulesTask" />

	<target name="init" depends="non_interactive,check_properties,load_core">
	</target>

	<!--
	Makes sure that the SVN externals values are set properly. This has to be done
	separately for every project to ensure that the SVN externals are committed 
	correctly so that we're always updating from the remote locations. 
	-->
	<target name="load_core" unless="installed">
		<phingcall target="set_externals" />
		<!-- now do an update - assumption is that no authentication is required... for now -->
		<exec command="svn up" />
	</target>
	
	<!-- Set the svn:externals property for absolutely dependent modules -->
	<target name="set_externals">
		<!-- Add the svn:externals stuff -->
		<exec command="svn propset svn:externals -F ${modules.core.file} ."></exec>
	</target>
	
	<!-- Load modules where sensitive dependency exists -->
	<target name="update_modules" depends="create_modules_file">
		<ssmodules file="${modules.depends.file}" />
	</target>

	<!-- 
	Copy the sample module dependency file if it doesn't exist yet. We don't want this 
	in SVN necessarily, but the .default file will contain those that the project
	should have. 
	 -->
	<target name="create_modules_file" unless="modules_file_exists">
		<copy file="${modules.depends.file}.default" tofile="${modules.depends.file}" />
	</target>
	
	<!-- 
	Add a new module to the system. Run from the commandline, you can pass
	in the details of the module as phing add_module -Dmodule=blog -Dmodurl=http://path/to/svn
	-->
	<target name="add_module">
		<ssmodules name="${module}" url="${modurl}"  devBuildUrl="${devbuild.url}" />
	</target> 

	<!-- Ensures the build.properties file exists! -->
	<target name="check_properties" unless="properties_exist">
		<fail>!!Please create the scripts/build.properties file before continuing!!</fail>
	</target>

	<!-- A target that gets executed if the 'ni_build' parameter is set. This is done when 
	the build is executed from a CI container -->
	<target name="non_interactive" if="ni_build">
		<!-- we'll make sure that there's a build.properties file, even if we're just using the default  -->
		<copy tofile="./scripts/build.properties" file="./scripts/build.properties.sample" />
		<property name="properties_exist" value="true" override="true" />
		<property file="./scripts/build.properties"></property>
	</target>

	<!-- Installs a freshly checked-out silverstripe project -->
	<target name="build" depends="init">
		<!-- Copy the DB configs -->
		<copy tofile="mysite/db.conf.php" file="${db.config}" overwrite="false">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the configs to be used for testing. Set the required variables in the build.properties file -->
		<copy tofile="ssautesting/testing.conf.php" file="${testing.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<!-- Copy the htaccess -->
		<copy tofile=".htaccess" file="${htaccess.config}" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<phingcall target="update_modules" />

		<!-- Trigger /dev/build for the new system -->
		<exec command="php sapphire/cli-script.php /dev/build username=${admin.username} password=${admin.password}"></exec>
	</target>
	
	<!-- Create a deployable package -->
	<target name="package">
		<delete file="${package.name}" />
		<copy file="${db.config}" tofile="mysite/${db.config}" />
		<tar destfile="${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="scripts/**" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/error.log" />
				<exclude name="**/.svn" />
				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
			</fileset>
		</tar>
	</target>

	<!-- A package that doesn't include files that are commonly overridden
	on remote sites -->
	<target name="update-package">
		<!-- <delete file="${package.name}" />-->
		<delete>
			<fileset dir="scripts/">
			<include name="*.tar.gz" />
			</fileset>
		</delete>

		<copy file="${db.config}" tofile="mysite/${db.config}" />
		<tar destfile="${package.name}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="**/**" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="mysite/error.log" />
				<exclude name="scripts/**" />
				<exclude name=".htaccess" />
				<exclude name="**/.svn" />
				<exclude name="nbproject/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
				<exclude name="assets/**" />
			</fileset>
		</tar>
	</target>

	<target name="package-module" depends="build">
		<delete file="${module.file}" />
		<tar destfile="${module.file}" compression="gzip">
			<fileset dir="${project.basedir}">
				<include name="${module.name}/**" />
				<exclude name="**/.svn" />
			</fileset>
		</tar>
	</target>

	<!-- Creates a backup of the existing project, including the MySQL dump -->
	<target name="backup">
		<echo file="README.txt" append="false">
To restore this backup:
* Import the database file in scripts/${phing.project.name}.sql
* Copy configs/silverstripe/db.conf.php.sample to mysite/db.conf.php
* Edit DB settings in db.conf as appropriate (typically, use MySQLDatabase as the db.type)
* Run 'php sapphire/cli-script.php dev/build'
		</echo>
		<exec command="mysqldump -u${db.user} -p${db.pass} ${db.name} > scripts/${phing.project.name}.sql"></exec>
		<phingcall target="package" />
	</target>

	<!-- Copy eclipse configs to the current directory -->
	<target name="eclipse" depends="init">
		<copy tofile=".project" file="./configs/eclipse/project.sample" overwrite="true">
			<filterchain><expandproperties/></filterchain>
		</copy>
	</target>

	<!-- Execute all the test cases -->
	<target name="test">
		<!-- Make sure the log directory exists -->
		<mkdir dir="${testing.logdir}" />
		<sstest module="${module}" testcase="${testcase}" />
	</target>
	
	<target name="clean">
		<delete file="${package.name}"></delete>
		<delete file="${database_dump.name}"></delete>
	</target>
</project>
